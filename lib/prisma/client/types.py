# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
                    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
                    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
                    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
                    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                            },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Artesao types

class ArtesaoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Artesao create method"""
    id: _int
    dataCadastro: datetime.datetime
    produtos: 'ProdutoCreateManyNestedWithoutRelationsInput'


class ArtesaoCreateInput(ArtesaoOptionalCreateInput):
    """Required arguments to the Artesao create method"""
    nome: _str
    email: _str
    senha: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ArtesaoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Artesao create method, without relations"""
    id: _int
    dataCadastro: datetime.datetime


class ArtesaoCreateWithoutRelationsInput(ArtesaoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Artesao create method, without relations"""
    nome: _str
    email: _str
    senha: _str

class ArtesaoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ArtesaoCreateWithoutRelationsInput'
    where: 'ArtesaoWhereUniqueInput'

class ArtesaoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ArtesaoCreateWithoutRelationsInput'
    connect: 'ArtesaoWhereUniqueInput'
    connect_or_create: 'ArtesaoConnectOrCreateWithoutRelationsInput'


class ArtesaoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ArtesaoCreateWithoutRelationsInput', List['ArtesaoCreateWithoutRelationsInput']]
    connect: Union['ArtesaoWhereUniqueInput', List['ArtesaoWhereUniqueInput']]
    connect_or_create: Union['ArtesaoConnectOrCreateWithoutRelationsInput', List['ArtesaoConnectOrCreateWithoutRelationsInput']]

_ArtesaoWhereUnique_id_Input = TypedDict(
    '_ArtesaoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ArtesaoWhereUnique_email_Input = TypedDict(
    '_ArtesaoWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

ArtesaoWhereUniqueInput = Union[
    '_ArtesaoWhereUnique_id_Input',
    '_ArtesaoWhereUnique_email_Input',
]


class ArtesaoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nome: _str
    email: _str
    senha: _str
    dataCadastro: datetime.datetime
    produtos: 'ProdutoUpdateManyWithoutRelationsInput'


class ArtesaoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nome: _str
    email: _str
    senha: _str
    dataCadastro: datetime.datetime


class ArtesaoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ArtesaoCreateWithoutRelationsInput']
    connect: List['ArtesaoWhereUniqueInput']
    connect_or_create: List['ArtesaoConnectOrCreateWithoutRelationsInput']
    set: List['ArtesaoWhereUniqueInput']
    disconnect: List['ArtesaoWhereUniqueInput']
    delete: List['ArtesaoWhereUniqueInput']

    # TODO
    # update: List['ArtesaoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ArtesaoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ArtesaoScalarWhereInput']
    # upsert: List['ArtesaoUpserteWithWhereUniqueWithoutRelationsInput']


class ArtesaoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ArtesaoCreateWithoutRelationsInput'
    connect: 'ArtesaoWhereUniqueInput'
    connect_or_create: 'ArtesaoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ArtesaoUpdateInput'
    # upsert: 'ArtesaoUpsertWithoutRelationsInput'


class ArtesaoUpsertInput(TypedDict):
    create: 'ArtesaoCreateInput'
    update: 'ArtesaoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Artesao_id_OrderByInput = TypedDict(
    '_Artesao_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Artesao_nome_OrderByInput = TypedDict(
    '_Artesao_nome_OrderByInput',
    {
        'nome': 'SortOrder',
    },
    total=True
)

_Artesao_email_OrderByInput = TypedDict(
    '_Artesao_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Artesao_senha_OrderByInput = TypedDict(
    '_Artesao_senha_OrderByInput',
    {
        'senha': 'SortOrder',
    },
    total=True
)

_Artesao_dataCadastro_OrderByInput = TypedDict(
    '_Artesao_dataCadastro_OrderByInput',
    {
        'dataCadastro': 'SortOrder',
    },
    total=True
)

ArtesaoOrderByInput = Union[
    '_Artesao_id_OrderByInput',
    '_Artesao_nome_OrderByInput',
    '_Artesao_email_OrderByInput',
    '_Artesao_senha_OrderByInput',
    '_Artesao_dataCadastro_OrderByInput',
]



# recursive Artesao types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ArtesaoRelationFilter = TypedDict(
    'ArtesaoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ArtesaoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ArtesaoInclude(TypedDict, total=False):
    """Artesao relational arguments"""
    produtos: Union[bool, 'FindManyProdutoArgsFromArtesao']


    

class ArtesaoIncludeFromArtesao(TypedDict, total=False):
    """Relational arguments for Artesao"""
    produtos: Union[bool, 'FindManyProdutoArgsFromArtesaoRecursive1']


class ArtesaoIncludeFromArtesaoRecursive1(TypedDict, total=False):
    """Relational arguments for Artesao"""
    produtos: Union[bool, 'FindManyProdutoArgsFromArtesaoRecursive2']


class ArtesaoIncludeFromArtesaoRecursive2(TypedDict, total=False):
    """Relational arguments for Artesao"""
    produtos: Union[bool, 'FindManyProdutoArgsFromArtesaoRecursive3']


class ArtesaoIncludeFromArtesaoRecursive3(TypedDict, total=False):
    """Relational arguments for Artesao"""
    produtos: Union[bool, 'FindManyProdutoArgsFromArtesaoRecursive4']


class ArtesaoIncludeFromArtesaoRecursive4(TypedDict, total=False):
    """Relational arguments for Artesao"""

    

class ArtesaoArgsFromArtesao(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ArtesaoIncludeFromArtesaoRecursive1'


class ArtesaoArgsFromArtesaoRecursive1(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ArtesaoIncludeFromArtesaoRecursive2'


class ArtesaoArgsFromArtesaoRecursive2(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ArtesaoIncludeFromArtesaoRecursive3'


class ArtesaoArgsFromArtesaoRecursive3(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ArtesaoIncludeFromArtesaoRecursive4'


class ArtesaoArgsFromArtesaoRecursive4(TypedDict, total=False):
    """Arguments for Artesao"""
    
    

class FindManyArtesaoArgsFromArtesao(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive1'


class FindManyArtesaoArgsFromArtesaoRecursive1(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive2'


class FindManyArtesaoArgsFromArtesaoRecursive2(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive3'


class FindManyArtesaoArgsFromArtesaoRecursive3(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive4'


class FindManyArtesaoArgsFromArtesaoRecursive4(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    
    

class ProdutoIncludeFromArtesao(TypedDict, total=False):
    """Relational arguments for Artesao"""
    artesao: Union[bool, 'ArtesaoArgsFromArtesaoRecursive1']


class ProdutoIncludeFromArtesaoRecursive1(TypedDict, total=False):
    """Relational arguments for Artesao"""
    artesao: Union[bool, 'ArtesaoArgsFromArtesaoRecursive2']


class ProdutoIncludeFromArtesaoRecursive2(TypedDict, total=False):
    """Relational arguments for Artesao"""
    artesao: Union[bool, 'ArtesaoArgsFromArtesaoRecursive3']


class ProdutoIncludeFromArtesaoRecursive3(TypedDict, total=False):
    """Relational arguments for Artesao"""
    artesao: Union[bool, 'ArtesaoArgsFromArtesaoRecursive4']


class ProdutoIncludeFromArtesaoRecursive4(TypedDict, total=False):
    """Relational arguments for Artesao"""

    

class ProdutoArgsFromArtesao(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ProdutoIncludeFromProdutoRecursive1'


class ProdutoArgsFromArtesaoRecursive1(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ProdutoIncludeFromProdutoRecursive2'


class ProdutoArgsFromArtesaoRecursive2(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ProdutoIncludeFromProdutoRecursive3'


class ProdutoArgsFromArtesaoRecursive3(TypedDict, total=False):
    """Arguments for Artesao"""
    include: 'ProdutoIncludeFromProdutoRecursive4'


class ProdutoArgsFromArtesaoRecursive4(TypedDict, total=False):
    """Arguments for Artesao"""
    
    

class FindManyProdutoArgsFromArtesao(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive1'


class FindManyProdutoArgsFromArtesaoRecursive1(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive2'


class FindManyProdutoArgsFromArtesaoRecursive2(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive3'


class FindManyProdutoArgsFromArtesaoRecursive3(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive4'


class FindManyProdutoArgsFromArtesaoRecursive4(TypedDict, total=False):
    """Arguments for Artesao"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    


FindManyArtesaoArgs = FindManyArtesaoArgsFromArtesao
FindFirstArtesaoArgs = FindManyArtesaoArgsFromArtesao


    

class ArtesaoWhereInput(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    senha: Union[_str, 'types.StringFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    produtos: 'ProdutoListRelationFilter'

    # should be noted that AND and NOT should be Union['ArtesaoWhereInputRecursive1', List['ArtesaoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ArtesaoWhereInputRecursive1']
    OR: List['ArtesaoWhereInputRecursive1']
    NOT: List['ArtesaoWhereInputRecursive1']


class ArtesaoWhereInputRecursive1(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    senha: Union[_str, 'types.StringFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    produtos: 'ProdutoListRelationFilter'

    # should be noted that AND and NOT should be Union['ArtesaoWhereInputRecursive2', List['ArtesaoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ArtesaoWhereInputRecursive2']
    OR: List['ArtesaoWhereInputRecursive2']
    NOT: List['ArtesaoWhereInputRecursive2']


class ArtesaoWhereInputRecursive2(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    senha: Union[_str, 'types.StringFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    produtos: 'ProdutoListRelationFilter'

    # should be noted that AND and NOT should be Union['ArtesaoWhereInputRecursive3', List['ArtesaoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ArtesaoWhereInputRecursive3']
    OR: List['ArtesaoWhereInputRecursive3']
    NOT: List['ArtesaoWhereInputRecursive3']


class ArtesaoWhereInputRecursive3(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    senha: Union[_str, 'types.StringFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    produtos: 'ProdutoListRelationFilter'

    # should be noted that AND and NOT should be Union['ArtesaoWhereInputRecursive4', List['ArtesaoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ArtesaoWhereInputRecursive4']
    OR: List['ArtesaoWhereInputRecursive4']
    NOT: List['ArtesaoWhereInputRecursive4']


class ArtesaoWhereInputRecursive4(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    senha: Union[_str, 'types.StringFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    produtos: 'ProdutoListRelationFilter'



# aggregate Artesao types


    

class ArtesaoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    senha: Union[_str, 'types.StringWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ArtesaoScalarWhereWithAggregatesInputRecursive1']
    OR: List['ArtesaoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ArtesaoScalarWhereWithAggregatesInputRecursive1']


class ArtesaoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    senha: Union[_str, 'types.StringWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ArtesaoScalarWhereWithAggregatesInputRecursive2']
    OR: List['ArtesaoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ArtesaoScalarWhereWithAggregatesInputRecursive2']


class ArtesaoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    senha: Union[_str, 'types.StringWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ArtesaoScalarWhereWithAggregatesInputRecursive3']
    OR: List['ArtesaoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ArtesaoScalarWhereWithAggregatesInputRecursive3']


class ArtesaoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    senha: Union[_str, 'types.StringWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ArtesaoScalarWhereWithAggregatesInputRecursive4']
    OR: List['ArtesaoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ArtesaoScalarWhereWithAggregatesInputRecursive4']


class ArtesaoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Artesao arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    senha: Union[_str, 'types.StringWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ArtesaoGroupByOutput(TypedDict, total=False):
    id: _int
    nome: _str
    email: _str
    senha: _str
    dataCadastro: datetime.datetime
    _sum: 'ArtesaoSumAggregateOutput'
    _avg: 'ArtesaoAvgAggregateOutput'
    _min: 'ArtesaoMinAggregateOutput'
    _max: 'ArtesaoMaxAggregateOutput'
    _count: 'ArtesaoCountAggregateOutput'


class ArtesaoAvgAggregateOutput(TypedDict, total=False):
    """Artesao output for aggregating averages"""
    id: float


class ArtesaoSumAggregateOutput(TypedDict, total=False):
    """Artesao output for aggregating sums"""
    id: _int


class ArtesaoScalarAggregateOutput(TypedDict, total=False):
    """Artesao output including scalar fields"""
    id: _int
    nome: _str
    email: _str
    senha: _str
    dataCadastro: datetime.datetime


ArtesaoMinAggregateOutput = ArtesaoScalarAggregateOutput
ArtesaoMaxAggregateOutput = ArtesaoScalarAggregateOutput


class ArtesaoMaxAggregateInput(TypedDict, total=False):
    """Artesao input for aggregating by max"""
    id: bool
    nome: bool
    email: bool
    senha: bool
    dataCadastro: bool


class ArtesaoMinAggregateInput(TypedDict, total=False):
    """Artesao input for aggregating by min"""
    id: bool
    nome: bool
    email: bool
    senha: bool
    dataCadastro: bool


class ArtesaoNumberAggregateInput(TypedDict, total=False):
    """Artesao input for aggregating numbers"""
    id: bool


ArtesaoAvgAggregateInput = ArtesaoNumberAggregateInput
ArtesaoSumAggregateInput = ArtesaoNumberAggregateInput


ArtesaoCountAggregateInput = TypedDict(
    'ArtesaoCountAggregateInput',
    {
        'id': bool,
        'nome': bool,
        'email': bool,
        'senha': bool,
        'dataCadastro': bool,
        '_all': bool,
    },
    total=False,
)

ArtesaoCountAggregateOutput = TypedDict(
    'ArtesaoCountAggregateOutput',
    {
        'id': int,
        'nome': int,
        'email': int,
        'senha': int,
        'dataCadastro': int,
        '_all': int,
    },
    total=False,
)


ArtesaoKeys = Literal[
    'id',
    'nome',
    'email',
    'senha',
    'dataCadastro',
    'produtos',
]
ArtesaoScalarFieldKeys = Literal[
    'id',
    'nome',
    'email',
    'senha',
    'dataCadastro',
]
ArtesaoScalarFieldKeysT = TypeVar('ArtesaoScalarFieldKeysT', bound=ArtesaoScalarFieldKeys)

ArtesaoRelationalFieldKeys = Literal[
        'produtos',
    ]

# Produto types

class ProdutoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Produto create method"""
    id: _int
    dataCadastro: datetime.datetime
    artesaoId: _int
    artesao: 'ArtesaoCreateNestedWithoutRelationsInput'


class ProdutoCreateInput(ProdutoOptionalCreateInput):
    """Required arguments to the Produto create method"""
    nome: _str
    descricao: _str
    preco: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProdutoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Produto create method, without relations"""
    id: _int
    dataCadastro: datetime.datetime
    artesaoId: _int


class ProdutoCreateWithoutRelationsInput(ProdutoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Produto create method, without relations"""
    nome: _str
    descricao: _str
    preco: _float

class ProdutoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProdutoCreateWithoutRelationsInput'
    where: 'ProdutoWhereUniqueInput'

class ProdutoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProdutoCreateWithoutRelationsInput'
    connect: 'ProdutoWhereUniqueInput'
    connect_or_create: 'ProdutoConnectOrCreateWithoutRelationsInput'


class ProdutoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProdutoCreateWithoutRelationsInput', List['ProdutoCreateWithoutRelationsInput']]
    connect: Union['ProdutoWhereUniqueInput', List['ProdutoWhereUniqueInput']]
    connect_or_create: Union['ProdutoConnectOrCreateWithoutRelationsInput', List['ProdutoConnectOrCreateWithoutRelationsInput']]

_ProdutoWhereUnique_id_Input = TypedDict(
    '_ProdutoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ProdutoWhereUniqueInput = _ProdutoWhereUnique_id_Input


class ProdutoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    nome: _str
    descricao: _str
    preco: Union[AtomicFloatInput, _float]
    dataCadastro: datetime.datetime
    artesao: 'ArtesaoUpdateOneWithoutRelationsInput'


class ProdutoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    nome: _str
    descricao: _str
    preco: Union[AtomicFloatInput, _float]
    dataCadastro: datetime.datetime


class ProdutoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProdutoCreateWithoutRelationsInput']
    connect: List['ProdutoWhereUniqueInput']
    connect_or_create: List['ProdutoConnectOrCreateWithoutRelationsInput']
    set: List['ProdutoWhereUniqueInput']
    disconnect: List['ProdutoWhereUniqueInput']
    delete: List['ProdutoWhereUniqueInput']

    # TODO
    # update: List['ProdutoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProdutoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProdutoScalarWhereInput']
    # upsert: List['ProdutoUpserteWithWhereUniqueWithoutRelationsInput']


class ProdutoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProdutoCreateWithoutRelationsInput'
    connect: 'ProdutoWhereUniqueInput'
    connect_or_create: 'ProdutoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProdutoUpdateInput'
    # upsert: 'ProdutoUpsertWithoutRelationsInput'


class ProdutoUpsertInput(TypedDict):
    create: 'ProdutoCreateInput'
    update: 'ProdutoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Produto_id_OrderByInput = TypedDict(
    '_Produto_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Produto_nome_OrderByInput = TypedDict(
    '_Produto_nome_OrderByInput',
    {
        'nome': 'SortOrder',
    },
    total=True
)

_Produto_descricao_OrderByInput = TypedDict(
    '_Produto_descricao_OrderByInput',
    {
        'descricao': 'SortOrder',
    },
    total=True
)

_Produto_preco_OrderByInput = TypedDict(
    '_Produto_preco_OrderByInput',
    {
        'preco': 'SortOrder',
    },
    total=True
)

_Produto_dataCadastro_OrderByInput = TypedDict(
    '_Produto_dataCadastro_OrderByInput',
    {
        'dataCadastro': 'SortOrder',
    },
    total=True
)

_Produto_artesaoId_OrderByInput = TypedDict(
    '_Produto_artesaoId_OrderByInput',
    {
        'artesaoId': 'SortOrder',
    },
    total=True
)

ProdutoOrderByInput = Union[
    '_Produto_id_OrderByInput',
    '_Produto_nome_OrderByInput',
    '_Produto_descricao_OrderByInput',
    '_Produto_preco_OrderByInput',
    '_Produto_dataCadastro_OrderByInput',
    '_Produto_artesaoId_OrderByInput',
]



# recursive Produto types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProdutoRelationFilter = TypedDict(
    'ProdutoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProdutoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProdutoInclude(TypedDict, total=False):
    """Produto relational arguments"""
    artesao: Union[bool, 'ArtesaoArgsFromProduto']


    

class ArtesaoIncludeFromProduto(TypedDict, total=False):
    """Relational arguments for Produto"""
    produtos: Union[bool, 'FindManyProdutoArgsFromProdutoRecursive1']


class ArtesaoIncludeFromProdutoRecursive1(TypedDict, total=False):
    """Relational arguments for Produto"""
    produtos: Union[bool, 'FindManyProdutoArgsFromProdutoRecursive2']


class ArtesaoIncludeFromProdutoRecursive2(TypedDict, total=False):
    """Relational arguments for Produto"""
    produtos: Union[bool, 'FindManyProdutoArgsFromProdutoRecursive3']


class ArtesaoIncludeFromProdutoRecursive3(TypedDict, total=False):
    """Relational arguments for Produto"""
    produtos: Union[bool, 'FindManyProdutoArgsFromProdutoRecursive4']


class ArtesaoIncludeFromProdutoRecursive4(TypedDict, total=False):
    """Relational arguments for Produto"""

    

class ArtesaoArgsFromProduto(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ArtesaoIncludeFromArtesaoRecursive1'


class ArtesaoArgsFromProdutoRecursive1(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ArtesaoIncludeFromArtesaoRecursive2'


class ArtesaoArgsFromProdutoRecursive2(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ArtesaoIncludeFromArtesaoRecursive3'


class ArtesaoArgsFromProdutoRecursive3(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ArtesaoIncludeFromArtesaoRecursive4'


class ArtesaoArgsFromProdutoRecursive4(TypedDict, total=False):
    """Arguments for Produto"""
    
    

class FindManyArtesaoArgsFromProduto(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive1'


class FindManyArtesaoArgsFromProdutoRecursive1(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive2'


class FindManyArtesaoArgsFromProdutoRecursive2(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive3'


class FindManyArtesaoArgsFromProdutoRecursive3(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    include: 'ArtesaoIncludeFromArtesaoRecursive4'


class FindManyArtesaoArgsFromProdutoRecursive4(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ArtesaoOrderByInput', List['ArtesaoOrderByInput']]
    where: 'ArtesaoWhereInput'
    cursor: 'ArtesaoWhereUniqueInput'
    distinct: List['ArtesaoScalarFieldKeys']
    
    

class ProdutoIncludeFromProduto(TypedDict, total=False):
    """Relational arguments for Produto"""
    artesao: Union[bool, 'ArtesaoArgsFromProdutoRecursive1']


class ProdutoIncludeFromProdutoRecursive1(TypedDict, total=False):
    """Relational arguments for Produto"""
    artesao: Union[bool, 'ArtesaoArgsFromProdutoRecursive2']


class ProdutoIncludeFromProdutoRecursive2(TypedDict, total=False):
    """Relational arguments for Produto"""
    artesao: Union[bool, 'ArtesaoArgsFromProdutoRecursive3']


class ProdutoIncludeFromProdutoRecursive3(TypedDict, total=False):
    """Relational arguments for Produto"""
    artesao: Union[bool, 'ArtesaoArgsFromProdutoRecursive4']


class ProdutoIncludeFromProdutoRecursive4(TypedDict, total=False):
    """Relational arguments for Produto"""

    

class ProdutoArgsFromProduto(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ProdutoIncludeFromProdutoRecursive1'


class ProdutoArgsFromProdutoRecursive1(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ProdutoIncludeFromProdutoRecursive2'


class ProdutoArgsFromProdutoRecursive2(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ProdutoIncludeFromProdutoRecursive3'


class ProdutoArgsFromProdutoRecursive3(TypedDict, total=False):
    """Arguments for Produto"""
    include: 'ProdutoIncludeFromProdutoRecursive4'


class ProdutoArgsFromProdutoRecursive4(TypedDict, total=False):
    """Arguments for Produto"""
    
    

class FindManyProdutoArgsFromProduto(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive1'


class FindManyProdutoArgsFromProdutoRecursive1(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive2'


class FindManyProdutoArgsFromProdutoRecursive2(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive3'


class FindManyProdutoArgsFromProdutoRecursive3(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    include: 'ProdutoIncludeFromProdutoRecursive4'


class FindManyProdutoArgsFromProdutoRecursive4(TypedDict, total=False):
    """Arguments for Produto"""
    take: int
    skip: int
    order_by: Union['ProdutoOrderByInput', List['ProdutoOrderByInput']]
    where: 'ProdutoWhereInput'
    cursor: 'ProdutoWhereUniqueInput'
    distinct: List['ProdutoScalarFieldKeys']
    


FindManyProdutoArgs = FindManyProdutoArgsFromProduto
FindFirstProdutoArgs = FindManyProdutoArgsFromProduto


    

class ProdutoWhereInput(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    descricao: Union[_str, 'types.StringFilter']
    preco: Union[_float, 'types.FloatFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    artesaoId: Union[_int, 'types.IntFilter']
    artesao: 'ArtesaoRelationFilter'

    # should be noted that AND and NOT should be Union['ProdutoWhereInputRecursive1', List['ProdutoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProdutoWhereInputRecursive1']
    OR: List['ProdutoWhereInputRecursive1']
    NOT: List['ProdutoWhereInputRecursive1']


class ProdutoWhereInputRecursive1(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    descricao: Union[_str, 'types.StringFilter']
    preco: Union[_float, 'types.FloatFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    artesaoId: Union[_int, 'types.IntFilter']
    artesao: 'ArtesaoRelationFilter'

    # should be noted that AND and NOT should be Union['ProdutoWhereInputRecursive2', List['ProdutoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProdutoWhereInputRecursive2']
    OR: List['ProdutoWhereInputRecursive2']
    NOT: List['ProdutoWhereInputRecursive2']


class ProdutoWhereInputRecursive2(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    descricao: Union[_str, 'types.StringFilter']
    preco: Union[_float, 'types.FloatFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    artesaoId: Union[_int, 'types.IntFilter']
    artesao: 'ArtesaoRelationFilter'

    # should be noted that AND and NOT should be Union['ProdutoWhereInputRecursive3', List['ProdutoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProdutoWhereInputRecursive3']
    OR: List['ProdutoWhereInputRecursive3']
    NOT: List['ProdutoWhereInputRecursive3']


class ProdutoWhereInputRecursive3(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    descricao: Union[_str, 'types.StringFilter']
    preco: Union[_float, 'types.FloatFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    artesaoId: Union[_int, 'types.IntFilter']
    artesao: 'ArtesaoRelationFilter'

    # should be noted that AND and NOT should be Union['ProdutoWhereInputRecursive4', List['ProdutoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProdutoWhereInputRecursive4']
    OR: List['ProdutoWhereInputRecursive4']
    NOT: List['ProdutoWhereInputRecursive4']


class ProdutoWhereInputRecursive4(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    nome: Union[_str, 'types.StringFilter']
    descricao: Union[_str, 'types.StringFilter']
    preco: Union[_float, 'types.FloatFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeFilter']
    artesaoId: Union[_int, 'types.IntFilter']
    artesao: 'ArtesaoRelationFilter'



# aggregate Produto types


    

class ProdutoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_float, 'types.FloatWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    artesaoId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProdutoScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProdutoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProdutoScalarWhereWithAggregatesInputRecursive1']


class ProdutoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_float, 'types.FloatWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    artesaoId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProdutoScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProdutoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProdutoScalarWhereWithAggregatesInputRecursive2']


class ProdutoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_float, 'types.FloatWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    artesaoId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProdutoScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProdutoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProdutoScalarWhereWithAggregatesInputRecursive3']


class ProdutoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_float, 'types.FloatWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    artesaoId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ProdutoScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProdutoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProdutoScalarWhereWithAggregatesInputRecursive4']


class ProdutoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Produto arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    nome: Union[_str, 'types.StringWithAggregatesFilter']
    descricao: Union[_str, 'types.StringWithAggregatesFilter']
    preco: Union[_float, 'types.FloatWithAggregatesFilter']
    dataCadastro: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    artesaoId: Union[_int, 'types.IntWithAggregatesFilter']



class ProdutoGroupByOutput(TypedDict, total=False):
    id: _int
    nome: _str
    descricao: _str
    preco: _float
    dataCadastro: datetime.datetime
    artesaoId: _int
    _sum: 'ProdutoSumAggregateOutput'
    _avg: 'ProdutoAvgAggregateOutput'
    _min: 'ProdutoMinAggregateOutput'
    _max: 'ProdutoMaxAggregateOutput'
    _count: 'ProdutoCountAggregateOutput'


class ProdutoAvgAggregateOutput(TypedDict, total=False):
    """Produto output for aggregating averages"""
    id: float
    preco: float
    artesaoId: float


class ProdutoSumAggregateOutput(TypedDict, total=False):
    """Produto output for aggregating sums"""
    id: _int
    preco: _float
    artesaoId: _int


class ProdutoScalarAggregateOutput(TypedDict, total=False):
    """Produto output including scalar fields"""
    id: _int
    nome: _str
    descricao: _str
    preco: _float
    dataCadastro: datetime.datetime
    artesaoId: _int


ProdutoMinAggregateOutput = ProdutoScalarAggregateOutput
ProdutoMaxAggregateOutput = ProdutoScalarAggregateOutput


class ProdutoMaxAggregateInput(TypedDict, total=False):
    """Produto input for aggregating by max"""
    id: bool
    nome: bool
    descricao: bool
    preco: bool
    dataCadastro: bool
    artesaoId: bool


class ProdutoMinAggregateInput(TypedDict, total=False):
    """Produto input for aggregating by min"""
    id: bool
    nome: bool
    descricao: bool
    preco: bool
    dataCadastro: bool
    artesaoId: bool


class ProdutoNumberAggregateInput(TypedDict, total=False):
    """Produto input for aggregating numbers"""
    id: bool
    preco: bool
    artesaoId: bool


ProdutoAvgAggregateInput = ProdutoNumberAggregateInput
ProdutoSumAggregateInput = ProdutoNumberAggregateInput


ProdutoCountAggregateInput = TypedDict(
    'ProdutoCountAggregateInput',
    {
        'id': bool,
        'nome': bool,
        'descricao': bool,
        'preco': bool,
        'dataCadastro': bool,
        'artesaoId': bool,
        '_all': bool,
    },
    total=False,
)

ProdutoCountAggregateOutput = TypedDict(
    'ProdutoCountAggregateOutput',
    {
        'id': int,
        'nome': int,
        'descricao': int,
        'preco': int,
        'dataCadastro': int,
        'artesaoId': int,
        '_all': int,
    },
    total=False,
)


ProdutoKeys = Literal[
    'id',
    'nome',
    'descricao',
    'preco',
    'dataCadastro',
    'artesaoId',
    'artesao',
]
ProdutoScalarFieldKeys = Literal[
    'id',
    'nome',
    'descricao',
    'preco',
    'dataCadastro',
    'artesaoId',
]
ProdutoScalarFieldKeysT = TypeVar('ProdutoScalarFieldKeysT', bound=ProdutoScalarFieldKeys)

ProdutoRelationalFieldKeys = Literal[
        'artesao',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields