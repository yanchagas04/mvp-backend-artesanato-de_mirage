# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class ArtesaoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Artesao]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Artesao.prisma().query_raw(
            'SELECT * FROM Artesao WHERE id = ?',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Artesao
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Artesao.prisma().query_first(
            'SELECT * FROM Artesao WHERE nome = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ArtesaoCreateInput,
        include: Optional[types.ArtesaoInclude] = None
    ) -> _PrismaModelT:
        """Create a new Artesao record.

        Parameters
        ----------
        data
            Artesao record data
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The created Artesao record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Artesao record from just the required fields
        artesao = await Artesao.prisma().create(
            data={
                # data to create a Artesao record
                'nome': 'ggciceaie',
                'email': 'bbehjachib',
                'senha': 'cadfabfehe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ArtesaoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Artesao records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Artesao record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Artesao.prisma().create_many(
            data=[
                {
                    # data to create a Artesao record
                    'nome': 'dgiiaaijj',
                    'email': 'bfaiacjjfc',
                    'senha': 'eigcfgbif',
                },
                {
                    # data to create a Artesao record
                    'nome': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'senha': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ArtesaoWhereUniqueInput,
        include: Optional[types.ArtesaoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Artesao record.

        Parameters
        ----------
        where
            Artesao filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The deleted Artesao record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        artesao = await Artesao.prisma().delete(
            where={
                'id': 836760821,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ArtesaoWhereUniqueInput,
        include: Optional[types.ArtesaoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Artesao record.

        Parameters
        ----------
        where
            Artesao filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The found Artesao record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        artesao = await Artesao.prisma().find_unique(
            where={
                'id': 595337866,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ArtesaoWhereUniqueInput,
        include: Optional[types.ArtesaoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Artesao record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Artesao filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The found Artesao record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        artesao = await Artesao.prisma().find_unique_or_raise(
            where={
                'id': 790425851,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
        include: Optional[types.ArtesaoInclude] = None,
        order: Optional[Union[types.ArtesaoOrderByInput, List[types.ArtesaoOrderByInput]]] = None,
        distinct: Optional[List[types.ArtesaoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Artesao records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Artesao records returned
        skip
            Ignore the first N results
        where
            Artesao filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Artesao model
        order
            Order the returned Artesao records by any field
        distinct
            Filter Artesao records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Artesao]
            The list of all Artesao records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Artesao records
        artesaos = await Artesao.prisma().find_many(take=10)

        # find the first 5 Artesao records ordered by the email field
        artesaos = await Artesao.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
        include: Optional[types.ArtesaoInclude] = None,
        order: Optional[Union[types.ArtesaoOrderByInput, List[types.ArtesaoOrderByInput]]] = None,
        distinct: Optional[List[types.ArtesaoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Artesao record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Artesao filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Artesao model
        order
            Order the returned Artesao records by any field
        distinct
            Filter Artesao records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Artesao
            The first Artesao record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Artesao record ordered by the senha field
        artesao = await Artesao.prisma().find_first(
            skip=1,
            order={
                'senha': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
        include: Optional[types.ArtesaoInclude] = None,
        order: Optional[Union[types.ArtesaoOrderByInput, List[types.ArtesaoOrderByInput]]] = None,
        distinct: Optional[List[types.ArtesaoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Artesao record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Artesao filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Artesao model
        order
            Order the returned Artesao records by any field
        distinct
            Filter Artesao records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Artesao
            The first Artesao record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Artesao record ordered by the dataCadastro field
        artesao = await Artesao.prisma().find_first_or_raise(
            skip=1,
            order={
                'dataCadastro': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ArtesaoUpdateInput,
        where: types.ArtesaoWhereUniqueInput,
        include: Optional[types.ArtesaoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Artesao record.

        Parameters
        ----------
        data
            Artesao record data specifying what to update
        where
            Artesao filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The updated Artesao record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        artesao = await Artesao.prisma().update(
            where={
                'id': 2111915288,
            },
            data={
                # data to update the Artesao record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ArtesaoWhereUniqueInput,
        data: types.ArtesaoUpsertInput,
        include: Optional[types.ArtesaoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Artesao filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Artesao model

        Returns
        -------
        prisma.models.Artesao
            The created or updated Artesao record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        artesao = await Artesao.prisma().upsert(
            where={
                'id': 1149758321,
            },
            data={
                'create': {
                    'id': 1149758321,
                    'nome': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'senha': 'biabhbdai',
                },
                'update': {
                    'nome': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'senha': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ArtesaoUpdateManyMutationInput,
        where: types.ArtesaoWhereInput,
    ) -> int:
        """Update multiple Artesao records

        Parameters
        ----------
        data
            Artesao data to update the selected Artesao records to
        where
            Filter to select the Artesao records to update

        Returns
        -------
        int
            The total number of Artesao records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Artesao records
        total = await Artesao.prisma().update_many(
            data={
                'id': 1644289366
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Artesao records present in the database

        Parameters
        ----------
        select
            Select the Artesao fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Artesao filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ArtesaoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Artesao.prisma().count()

        # results: prisma.types.ArtesaoCountAggregateOutput
        results = await Artesao.prisma().count(
            select={
                '_all': True,
                'nome': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ArtesaoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
    ) -> types.ArtesaoCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ArtesaoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ArtesaoWhereInput] = None,
        cursor: Optional[types.ArtesaoWhereUniqueInput] = None,
    ) -> Union[int, types.ArtesaoCountAggregateOutput]:
        """Count the number of Artesao records present in the database

        Parameters
        ----------
        select
            Select the Artesao fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Artesao filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ArtesaoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Artesao.prisma().count()

        # results: prisma.types.ArtesaoCountAggregateOutput
        results = await Artesao.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ArtesaoCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ArtesaoWhereInput] = None
    ) -> int:
        """Delete multiple Artesao records.

        Parameters
        ----------
        where
            Optional Artesao filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Artesao records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Artesao records
        total = await Artesao.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ArtesaoScalarFieldKeys'],
        *,
        where: Optional['types.ArtesaoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ArtesaoAvgAggregateInput'] = None,
        sum: Optional['types.ArtesaoSumAggregateInput'] = None,
        min: Optional['types.ArtesaoMinAggregateInput'] = None,
        max: Optional['types.ArtesaoMaxAggregateInput'] = None,
        having: Optional['types.ArtesaoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ArtesaoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ArtesaoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ArtesaoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ArtesaoGroupByOutput']:
        """Group Artesao records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Artesao fields to group records by
        where
            Artesao filter to select records
        take
            Limit the maximum number of Artesao records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ArtesaoGroupByOutput]
            A list of dictionaries representing the Artesao record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Artesao records by senha values
        # and count how many records are in each group
        results = await Artesao.prisma().group_by(
            ['senha'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProdutoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Produto]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Produto.prisma().query_raw(
            'SELECT * FROM Produto WHERE id = ?',
            1388290519,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Produto
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Produto.prisma().query_first(
            'SELECT * FROM Produto WHERE nome = ?',
            'bgehebiafc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProdutoCreateInput,
        include: Optional[types.ProdutoInclude] = None
    ) -> _PrismaModelT:
        """Create a new Produto record.

        Parameters
        ----------
        data
            Produto record data
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The created Produto record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Produto record from just the required fields
        produto = await Produto.prisma().create(
            data={
                # data to create a Produto record
                'nome': 'bghffegacj',
                'descricao': 'bhghchehcc',
                'preco': 326272115.134320,
                'artesaoId': 675780521,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProdutoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Produto records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Produto record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Produto.prisma().create_many(
            data=[
                {
                    # data to create a Produto record
                    'nome': 'heejgedji',
                    'descricao': 'bjgjgibgbf',
                    'preco': 1116175964.86147,
                    'artesaoId': 1303003706,
                },
                {
                    # data to create a Produto record
                    'nome': 'bgiggdidbf',
                    'descricao': 'caaaedabfc',
                    'preco': 1868141281.186084,
                    'artesaoId': 1448521415,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProdutoWhereUniqueInput,
        include: Optional[types.ProdutoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Produto record.

        Parameters
        ----------
        where
            Produto filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The deleted Produto record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        produto = await Produto.prisma().delete(
            where={
                'id': 1628650740,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProdutoWhereUniqueInput,
        include: Optional[types.ProdutoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Produto record.

        Parameters
        ----------
        where
            Produto filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The found Produto record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        produto = await Produto.prisma().find_unique(
            where={
                'id': 1249606685,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProdutoWhereUniqueInput,
        include: Optional[types.ProdutoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Produto record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Produto filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The found Produto record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        produto = await Produto.prisma().find_unique_or_raise(
            where={
                'id': 835903122,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
        include: Optional[types.ProdutoInclude] = None,
        order: Optional[Union[types.ProdutoOrderByInput, List[types.ProdutoOrderByInput]]] = None,
        distinct: Optional[List[types.ProdutoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Produto records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Produto records returned
        skip
            Ignore the first N results
        where
            Produto filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Produto model
        order
            Order the returned Produto records by any field
        distinct
            Filter Produto records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Produto]
            The list of all Produto records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Produto records
        produtos = await Produto.prisma().find_many(take=10)

        # find the first 5 Produto records ordered by the descricao field
        produtos = await Produto.prisma().find_many(
            take=5,
            order={
                'descricao': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
        include: Optional[types.ProdutoInclude] = None,
        order: Optional[Union[types.ProdutoOrderByInput, List[types.ProdutoOrderByInput]]] = None,
        distinct: Optional[List[types.ProdutoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Produto record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Produto filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Produto model
        order
            Order the returned Produto records by any field
        distinct
            Filter Produto records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Produto
            The first Produto record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Produto record ordered by the preco field
        produto = await Produto.prisma().find_first(
            skip=1,
            order={
                'preco': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
        include: Optional[types.ProdutoInclude] = None,
        order: Optional[Union[types.ProdutoOrderByInput, List[types.ProdutoOrderByInput]]] = None,
        distinct: Optional[List[types.ProdutoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Produto record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Produto filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Produto model
        order
            Order the returned Produto records by any field
        distinct
            Filter Produto records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Produto
            The first Produto record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Produto record ordered by the dataCadastro field
        produto = await Produto.prisma().find_first_or_raise(
            skip=1,
            order={
                'dataCadastro': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProdutoUpdateInput,
        where: types.ProdutoWhereUniqueInput,
        include: Optional[types.ProdutoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Produto record.

        Parameters
        ----------
        data
            Produto record data specifying what to update
        where
            Produto filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The updated Produto record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        produto = await Produto.prisma().update(
            where={
                'id': 763719779,
            },
            data={
                # data to update the Produto record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProdutoWhereUniqueInput,
        data: types.ProdutoUpsertInput,
        include: Optional[types.ProdutoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Produto filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Produto model

        Returns
        -------
        prisma.models.Produto
            The created or updated Produto record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        produto = await Produto.prisma().upsert(
            where={
                'id': 429995104,
            },
            data={
                'create': {
                    'id': 429995104,
                    'nome': 'bgiggdidbf',
                    'descricao': 'caaaedabfc',
                    'preco': 1868141281.186084,
                    'artesaoId': 1448521415,
                },
                'update': {
                    'nome': 'bgiggdidbf',
                    'descricao': 'caaaedabfc',
                    'preco': 1868141281.186084,
                    'artesaoId': 1448521415,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProdutoUpdateManyMutationInput,
        where: types.ProdutoWhereInput,
    ) -> int:
        """Update multiple Produto records

        Parameters
        ----------
        data
            Produto data to update the selected Produto records to
        where
            Filter to select the Produto records to update

        Returns
        -------
        int
            The total number of Produto records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Produto records
        total = await Produto.prisma().update_many(
            data={
                'artesaoId': 1775811865
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Produto records present in the database

        Parameters
        ----------
        select
            Select the Produto fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Produto filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProdutoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Produto.prisma().count()

        # results: prisma.types.ProdutoCountAggregateOutput
        results = await Produto.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProdutoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
    ) -> types.ProdutoCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProdutoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProdutoWhereInput] = None,
        cursor: Optional[types.ProdutoWhereUniqueInput] = None,
    ) -> Union[int, types.ProdutoCountAggregateOutput]:
        """Count the number of Produto records present in the database

        Parameters
        ----------
        select
            Select the Produto fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Produto filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProdutoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Produto.prisma().count()

        # results: prisma.types.ProdutoCountAggregateOutput
        results = await Produto.prisma().count(
            select={
                '_all': True,
                'nome': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProdutoCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProdutoWhereInput] = None
    ) -> int:
        """Delete multiple Produto records.

        Parameters
        ----------
        where
            Optional Produto filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Produto records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Produto records
        total = await Produto.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProdutoScalarFieldKeys'],
        *,
        where: Optional['types.ProdutoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProdutoAvgAggregateInput'] = None,
        sum: Optional['types.ProdutoSumAggregateInput'] = None,
        min: Optional['types.ProdutoMinAggregateInput'] = None,
        max: Optional['types.ProdutoMaxAggregateInput'] = None,
        having: Optional['types.ProdutoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProdutoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProdutoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProdutoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProdutoGroupByOutput']:
        """Group Produto records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Produto fields to group records by
        where
            Produto filter to select records
        take
            Limit the maximum number of Produto records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProdutoGroupByOutput]
            A list of dictionaries representing the Produto record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Produto records by descricao values
        # and count how many records are in each group
        results = await Produto.prisma().group_by(
            ['descricao'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models